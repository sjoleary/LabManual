---

title: "Lab Manual Conservation Biology Fall 2020"
subtitle: "Conservation Biology Fall 2020"
author: "Shannon J. O'Leary"
date: "`r Sys.Date()`"
knit: "bookdown::preview_chapter"
output:
  msmbstyle::msmb_html_book:
    highlight: tango
    toc: TRUE
    toc_depth: 1
    split_by: chapter
    split_bib: yes
    margin_references: FALSE
    css: msmb.css
bibliography: skeleton.bib
link-citations: yes

---

```{r include=FALSE}

library(msmbstyle)

# invalidate cache when the tufte version changes
knitr::opts_chunk$set(
  tidy = FALSE, 
  message = FALSE,
	warning = FALSE,
  cache.extra = packageVersion('msmbstyle'))

options(htmltools.dir.version = FALSE)

```

# Welcome to the tidyverse

**Date**: 8/24/2020

**Learning Objectives**

After completing this tutorial you should

* be able to read a tab-delimited file into R.
* use `filter` and `select` to include/exclude rows and columns from a data frame.
* use `group_by` to group rows.
* use `mutate` to add new columns.
* use `separate` and `unite` to separate content from a column across multiple columns and vice versa.
* use `summarize` to calculate summary statistics.


## Read in data

We are going to use the `IntroR` project directory and markdown file you created in the last tutorial. If you want to start fresh you can download a project folder [here](https://drive.google.com/drive/folders/1gcs-aKiBB0l4iqr11tBQDB9O_pWtEHRZ?usp=sharing). Keep the `YAML` header and delete the rest of the file content.

Download a tab-delimited text file containing catch data from a long-lining survey in Corpus Christi Bay [@Swift2020] and place it in the data directory.

In your Rmarkdown file insert a header as `# Import catch data`, and insert the following code chunk below to load the `tidyverse` packages and read in the catch data as a data frame.

```{r echo=TRUE, include=FALSE}

# load libraries
library(tidyverse)
library(knitr)

# read catch data
catch <- read_delim("data/longline_catchdata.txt", delim = "\t")

```

`read_delim` is the function we are using to read in the data, it takes two arguments, the path (`data/longline_catchdata.txt`) and the delimiter (`\t`).

Execute the code. If you look over in your environment pane you should now see the object `catch`. This is your dataframe. Click on it, you should see the command `View(catch)` in your console and a tab `catch` appear in your top left pane.

Inspect your data.

`r msmbstyle::question(label = "ques:one", text = "Can you determine how many columns and rows your data frame has from the View panel?")`

**Record your answer ("The data frame consists of ...") and describe how you figured this out in your rmarkdown.**

A quick way to check dimensions of your data frame is:

```{r}

# load libraries
dim(catch)

```

The first number is the number of rows, the second the number of columns.

You can get additional information on the object by just typing the object name.

```{r}

catch

```

The data set contains information on the sampling site, Species name, Sex, Pre-caudal length (PCL), fork length (FL), stretch total length (STL), Hook Size, and the set number and sampling date.

Now that we have a data frame to play with, let's explore some data wrangling options using `dplyr`. The `d` stands for `data` and the `plyr` stands for `plyers` - this package is designed to manipulate data frames. We are going to focus on the central actions (`verbs`) that will allow you to manipulate the data frame.

Sure, you could do all of these things in excel but there are advantages to using code -

* you aren't manipulating the raw data set - if you make a mistake or accidentally overwrite something you haven't made any permanent damage.
* You can manipulate data sets too large to easily handle in Excel.
* If you update your data set or have a second identically formatted data set you just have to re-run the code.

There is a bit of a learning curve but it will pay off in the long run. Be sure to record all the steps (code chunks) in your Rmarkdown - both the examples given here and the applications you will be asked to make. Write a (very brief) explanation of what a code chunk is doing above it - you'll likely want to be able to refer to the rendered document at a later point^[You may find it helpful to cut and paste from this manual].


## Select

Title this section as `# Select`.

```{marginfigure}

We will make heavy use of the magrittr pipe `%>%` this allows you to link commands together; think of it as "and now do this".

```

The function `select()` is used to select a subset of columns from a data set.

For example, you can select just the Site and Species columns.

```{r}

catch %>%
  select(Site, Species)

```

`r msmbstyle::question(label = "ques:two", text = "How would you select just Day, Month, and Year columns?")`

You PCL column doesn't contain any information (all `NA`s) - you can also eliminate individual columns by name.

```{r}

catch %>%
  select(-PCL)

```

`r msmbstyle::question(label = "ques:three", text = "How would you eliminate hook size from the data set?")`

You can also eliminate multiple columns by name, for example you would remove Day, Month and Year like this:

```{r}

catch %>%
  select(-Day, -Month, -Year)

```

If you want to re-arrange columns in your data frame, you would also use `select()`.

```{r}

catch %>%
  select(FL, Sex, Day)

```

If you wanted to move a set of columns to the front, but not have to type in all the other column names you can use `everything()`.

```{r}

catch %>%
  select(Day, Month, Year, everything())

```

There you go. Simple as that.


## Filter

Title this section as `# Filter` in your Rmarkdown.

The function `filter()` is used to subset a data frame by row. We do this using `regular expressions` that describe the content of sets of rows.

For example, we might only want Gafftop sail catfish (*Bagre marinus*).

```{r}

catch %>%
  filter(Species == "Bagre_marinus")

```

`r msmbstyle::question(label = "ques:four", text = "How would you select only rows containing Scalloped Hammerheads (*Sphyrna lewini*)?")`

Note: you need to use `==` (not `=` if you are looking for an exact match).

If want all rows but Gafftop sailfish you can use a `!` to say "not that".

```{r}

catch %>%
  filter(!Species == "Bagre_marinus")

```

`r msmbstyle::question(label = "ques:five", text = "How would you create a dataframe without Scalloped Hammerheads (*Sphyrna lewini*) entries?")`

Sometimes you might want to select rows that match a set of values^[The function `c()` (concatenate) creates what is called a vector of values].

```{r}

catch %>%
  filter(Species %in% c("Sciades_felis", "Bagre_marinus", "Synodus_foetens"))


```

Again, if you wanted everything but rows containing those values you would preface it with a `!`.

```{r}

catch %>%
  filter(!Species %in% c("Sciades_felis", "Bagre_marinus", "Synodus_foetens"))

```

`r msmbstyle::question(label = "ques:six", text = "How would you subset a data frame to contain only entries for different species in the genus Charcharhinus aka the sharky-sharks? There are four species in the data set - Carcharhinus_leucas, Carcharhinus_brevipinna, Carcharhinus_limbatus, Carcharhinus_porosus.")`

For numbers you can select all rows with values greater than a certain value using `>`.

```{r}

catch %>%
  filter(FL > 440)

```

`r msmbstyle::question(label = "ques:seven", text = "Create a data frame containing only entries with a forklength < 300.")`

You can also combine expressions - for example to select only scalloped hammerheads that are also smaller that 300 cm you would use

```{r}

catch %>%
  filter(Species == "Sphyrna_lewini" & FL < 300)

```

`r msmbstyle::question(label = "ques:eight", text = "How would you subset a data frame to contain only entries for different species in the genus Charcharhinus that have a forklength larger than 500 cm?")`

Instead of entries having to fulfill two (or more) requirements, you might have a situation where you only want to retain rows that fulfill one or another argument. For example, if you wanted all entries that are either gafftops or a fork length smaller than 300 cm you could use the following code:

```{r}

catch %>%
  filter(Species == "Sphyrna_lewini" | FL < 300)

```

`r msmbstyle::question(label = "ques:nine", text = "How would you select fish that have a forklength either smaller than 200 cm or larger than 300cm?")`
 
The tidyverse has a central concept call "split-apply-combine", which means that occasionally we want to group entries in a dataframe (split), do some sort of manipulation (apply), but end up with a single data frame (combine).


```{marginfigure}

The function `max()` can be used to get the maximum value for a vector of numbers. In this case, the vector we are looking at is the `FL` column of the `catch` dataframe.

```

For example, we might want to retain the entry with the longest fork length for each species. To do this we can use the `group_by()` function, then the `filter()` function.

```{r}

catch %>%
  group_by(Species) %>%
  filter(FL == max(FL)) %>%
  ungroup()

```
This is also an example of how we can use the pipe (`%>%`) to string a bunch of commands, in this example we are saying "take the object catch, and then group rows by Species and then for each group retain only the maximum forklength value for that group and then ungroup them again."

`r msmbstyle::question(label = "ques:ten", text = "How would you group rows by Species and then retain the individual caught on the largest hook size for each species?")`

Okay, now we can select subsets of columns and rows - what if we want to add columns or change data?

## Mutate

The function `mutate()` can be used to create new columns (usually based on columns already existing in the data frame) - this is a very powerful function with endless possibilities, we are going to stick to some of the basics^[Rest assured if your answer is "Oh, could I ..." the answer is "Yes".].

Start a new section in your markdown using `# Mutate`.

Let's say you wanted create a column that contained the difference between the fork length and the stretch total length:

```{r}

catch %>%
  mutate(difference = STL - FL)

```

You should now have a column called `difference` at the end of the data frame.

Instead of `-` you can use `+` to add , `*` to multiple, and `/` to divide values when creating a new column

`r msmbstyle::question(label = "ques:eleven", text = "How would you create a new column called ratio, that is the ratio of the fork to stretch total length?")`

You can also create a column that contains a logical value (`TRUE`/`FALSE`). For example we might need a column that indicates if the Sex is unknown.

```{r}

catch %>%
  mutate(unknown_sex = Sex == "U")

```

You should know have a column called `unknown_sex` where if the animal that was caught was not sexed contains the value `TRUE`, if it was identified as male or female it would say `FALSE`.

`r msmbstyle::question(label = "ques:twelve", text = "How would you create a new column called post_2017 that is TRUE if fish were caught after 2017?")`

```{marginfigure}

Note: For that last one, a "conditional mutate" using and `ifelse` statement - if this then do that, else do that) could have come in handy. This is what it would look like (file this away for "maybe useful later").

```


```{r}

catch %>%
  mutate(post_2017 = ifelse(Year >= 2017, TRUE, FALSE))

```

`separate()` is a function that does a very specific mutate, it will split the contents from one column across two or more columns. For example, you may have noticed that the Species is entered as `genus_species` - what if you wanted to have two separate columns with that information?

```{r}

catch %>%
  separate(Species, into = c("species", "genus"), sep = "_", remove = FALSE)

```

To do the opposite action you would use `unite()`. For example, if we wanted to create a column called date that had the day, month, and year of each sampling trip separated by an `_`.

```{r}

catch %>%
  unite(Date, Day, Month, Year, sep = "_", remove = FALSE)

```


You can of course also combine `mutate()` with `group_by()`. 

```{marginfigure}

The function `mean()` will calculate the mean value of a vector of numbers, the argument `na.rm=TRUE` tells the function to ignore any `NA`-values in the data set.

```

For example, let's say you wanted to create a column that is the difference between the fork length of an individual and the mean fork length of *that species*.

```{r}

catch %>%
  group_by(Species) %>%
  mutate(diff_mean = FL-mean(FL, na.rm = TRUE))

```

Almost there, we have one final action that will prove useful.


## Summarize

Start a new section in your Rmarkdown as  `# Summarize`.

Not infrequently we are more interested in summary stats of a data set rather than all the raw data - `Tidyverse` got you covered with the function `summarize`.

For example, we might want to calculate the mean and standard deviation of the measured fork length.

```{r}

catch %>%
  summarize(mean_FL = mean(FL, na.rm = TRUE),
            sd_FL = sd(FL, na.rm = TRUE))

```

`r msmbstyle::question(label = "ques:thirteen", text = "How could you use summarize to get the maximum forklength? Hint: Remember earlier we used the function max() to get a maximum value.")`

That's cool, but not super helpful ... unless, we leverage `group_by()` to start calculating summary stats for entries grouped for example by species:

```{r}

catch %>%
  group_by(Species) %>%
  summarize(mean_FL = mean(FL, na.rm = TRUE),
           median_FL = median(FL, na.rm = TRUE),
           max_FL = max(FL, na.rm = TRUE),
           min_FL = min(FL, na.rm = TRUE),
           sd_FL = sd(FL, na.rm = TRUE)) %>%
  ungroup()

```

You are getting a few `NA`, `NaN`, `-Inf`, and `Inf` values - any guesses why? You might want to pull up the catch data frame in the view panel to see what is going on with those species.

`r msmbstyle::question(label = "ques:fourteen", text = "How could you use summarize calculate a range of summary stats for species grouped by sex?")`

So far, we have been manipulating our data frame using code and printing it directly to the console (and our rmarkdown). This can be useful for example to generate tables for reports but frequently we want to create a new object that has been manipulated according to our code to use for other things (for example to visualize).

To do that we use the `<-` to assign the output to a new object (similar to the same way we did when we read in the data at the beginning of this tutorial).

```{r}

summary <- catch %>%
  group_by(Species) %>%
  summarize(mean_FL = mean(FL, na.rm = TRUE),
           median_FL = median(FL, na.rm = TRUE),
           max_FL = max(FL, na.rm = TRUE),
           min_FL = min(FL, na.rm = TRUE),
           sd_FL = sd(FL, na.rm = TRUE)) %>%
  ungroup()

```

When you execute this code, you'll notice that the code (and probably a warning) is printed to the console but there is no output. Instead, if you look at the environment in the top right corner you should now see a new object called `summary`. Again, you can pull that up in the Editor/View pane (top left) using either `View(summary)` in the console or by clicking on the object in the environment.

What if you wanted to print a table with the contents of that object? You can use the `kable()` function, you can even further format the table for example specify the number of digits printed using the argument `digits = ` and add a caption using `caption = "caption"`.

```{r}

kable(
  summary,
  digits = 1,
  caption = "Summary statistics of forklength for each species."
)

```


## Combining verbs

Start your final section as `# Combining verbs` in your markdown - we're almost there but now is your chance to put it all together. We've already combined most of our `dplyr` verbs with `group_by()` - you can use the pipe (`%>%`) to combine select, filter, mutate, and summarize as a series of commands.

`r msmbstyle::question(label = "ques:fifteen", text = "Look at the following code and then describe what each line is doing to manipulate the data frame (bullets is fine). Make an educated guess with the last line for a bonus verb!")`

```{r}

catch %>%
  select(-PCL, -Hook_Size) %>%
  separate(Species, into = c("genus", "species"), remove = TRUE) %>%
  unite(Date, Day, Month, Year) %>%
  filter(genus == "Carcharhinus" & Sex %in% c("F", "M")) %>%
  group_by(Site, genus, species, Sex) %>%
  filter(FL == max(FL)) %>%
  arrange(species)

```


